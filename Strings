
19/07/2024                                       
1).one
package patternmatching;

public class One {

	public static void main(String[] args) {
		for(int i = 1; i  <= 4; i++) {
			for(int j = 1; j <= i; j++) {
				System.out.print("*");
			}
			System.out.println();
		}
	}
}
2).two
package patternmatching;

public class Two {

	public static void main(String[] args) {
		for(int i = 4; i  >= 1; i--) {
			for(int j = 1; j <= i; j++) {
				System.out.print("*");
			}
			System.out.println();
		}
	}
}
3).three
package patternmatching;

public class Three {

	public static void main(String[] args) {
		for(int i = 4; i  >= 1; i--) {
			for(int j = 4; j > i; j--) {
			System.out.print(" ");
			}
			for(int k = 1; k <= i; k++) {
				System.out.print("*");
			}
			System.out.println();
		}
	}
}
4).four
package patternmatching;

public class Four {

	public static void main(String[] args) {
		for(int i = 1; i  <= 4; i++) {
			for(int j = 4; j > i; j--) {
			System.out.print(" ");
			}
			for(int k = 1; k <= i; k++) {
				System.out.print("*");
			}
			System.out.println();
		}
	}
}
5).five
package patternmatching;

public class Five {

	public static void main(String[] args) {
		for(int i = 1; i  <= 4; i++) {
			for(int j = 1; j <= 4; j++) {
			System.out.print("*");
			}
			System.out.println();
		}
	}
}
6).six
package patternmatching;

public class Six {

	public static void main(String[] args) {
		for(int i = 1; i  <= 3; i++) {
			for(int j = 3; j > i; j--) {
			System.out.print(" ");
			}
			for(int k = 1; k <= i; k++) {
				System.out.print(" *");
			}
			System.out.println();
		}	

      }
}
7).seven
package patternmatching;

public class Seven {

	public static void main(String[] args) {
		for(int i = 3; i  >= 1; i--) {
			for(int j = 3; j > i; j--) {
			System.out.print(" ");
			}
			for(int k = 1; k <= i; k++) {
				System.out.print(" *");
			}
			System.out.println();
		}
	}
}
8).eight
package patternmatching;

public class Eight {

    public static void main(String[] args) {
        for (int i = 1; i <= 4; i++) {
            for (int j = 1; j <= 4; j++) {
                if (i == 1 || i == 4 || j == 1 || j == 4) {
                    System.out.print("*");
                } else {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }
}
9).nine
package patternmatching;

public class Nine {

	public static void main(String[] args) {
		for(int i = 1; i <= 5; i++) {
		for(int j = 1; j <= 9; j++) {
			if(j>6-i && j<4+i) {
				System.out.print(" ");
			}
			else {
				System.out.print("*");
			}
		}
      System.out.println();
	}
}
}
10.ten
package patternmatching;

public class Six {

	public static void main(String[] args) {
		for(int i = 1; i  <= 3; i++) {
			for(int j = 3; j > i; j--) {
			System.out.print(" ");
			}
			for(int k = 1; k <= i; k++) {
				System.out.print(" *");
			}
			System.out.println();
		}
		 for (int i = 2; i >= 1; i--) {
	            for (int j = 3; j > i; j--) {
	                System.out.print(" ");
	            }
	            for (int k = 1; k <= i; k++) {
	                System.out.print(" *");
	            }
	            System.out.println();

	      }
      }
}
23/07/2024
1).WAP to print the string characters one by one using Strings...?
package strings;

public class String1 {

	public static void main(String[] args) {
		String s = "palle";
		System.out.println(s);
		for(int i = 0;i<=s.length()-1;i++) {
			System.out.println(s.charAt(i));
		}
	}
}
or
package strings;

public class String1 {

	public static void main(String[] args) {
		String s = "palle";
		System.out.println(s);
		String s1 = "";
		for(int i = 0;i<=s.length()-1;i++) {
			//System.out.println(s.charAt(i));
			s1 = s1 + s.charAt(i);
		}
		System.out.println(s1);
	}
}

2).WAP to print the string characters one by one using Strings in a reverse order...?
package strings;

public class String2 {

	public static void main(String[] args) {
		String s = "palle";
		System.out.println(s);
		for(int i = s.length()-1; i >= 0; i--) {
			System.out.println(s.charAt(i));
		}
	}
}
3).WAP to print the reverse of the string ...?
package strings;

public class String3 {

	public static void main(String[] args) {
		String s = "palle";
		System.out.println(s);
		String s1 = "";
		for(int i =s.length()-1;i>=0;i--) {
			s1 = s1 + s.charAt(i);
		}
		System.out.println(s1);
	}
}
4).WAP to print the reverse of the string and also check whether the string is palindrome or not...?
package strings;

public class StringPalindrome {

	public static void main(String[] args) {
		String s = "palle";
		System.out.println(s);
		String s1 = "";
       for(int i = s.length()-1;i>=0;i--) {
    	   s1 = s1 + s.charAt(i);
       }
       if(s1.equals(s)) {
    	   System.out.println("it is palindrome");
       }
       else {
    	   System.out.println("it is not palindrome");
       }
}
}
5).WAP to print welcome becomes welemoc using strings...?
package strings;

public class WelocomeBecomesWelemoc {

	public static void main(String[] args) {
		String s = "welcome";
		for(int i =0;i<=s.length()-5;i++) {	
			System.out.print(s.charAt(i));
		}
		String s1 = "";
		for(int j =s.length()-1;j>=3;j--) {
			s1 = s1+s.charAt(j);
		}
			System.out.println(s1);	
	}
}
6).WAP to to replace the vowels in the string with $..?
like welcome becomes w$lc$m$
package strings;

public class VowelReplacement {

	public static void main(String[] args) {
		String s = "welcome";
		char ch ='$';
		String res = "";
		for(int i = 0;i<=s.length()-1;i++) {
			
			if(s.charAt(i)=='a' || s.charAt(i)=='e' || s.charAt(i)=='i' || s.charAt(i)=='o' || s.charAt(i)=='u') {
				res = res + ch;
			}
			else {
				res = res + s.charAt(i);
			}
		}
		System.out.println(res);
	}
}
or
package strings;

public class VowelRep2 {

	public static void main(String[] args) {
		String s = "welcome";
		String s1 = "";
		for(int i = 0;i <= s.length()-1;i++) {
			if(s.charAt(i)=='a' || s.charAt(i)=='e' || s.charAt(i)=='i' || s.charAt(i)=='o' || s.charAt(i)=='u') {
				s1 = s1 + '$';
			}
			else {
				s1 = s1 + s.charAt(i);
			}
		}
        System.out.println(s1);  
	}
}
24/07/2024
1).WAP to count the number of vowels in the array..?
package strings;

public class CountVowelsOfString {

	public static void main(String[] args) {
		String s = "hi good morning";
		int count = 0;
		for(int i=0; i <= s.length()-1; i++) {
			if(s.charAt(i)=='a' || s.charAt(i)=='e' || s.charAt(i)=='i' || s.charAt(i)=='o' || s.charAt(i)=='u') {
				count = count + 1;
			}
		}
        System.out.println(count);
	}
}
2).WAP to count the number of words in the array..?
package strings;

public class CountNumOfWords {

	public static void main(String[] args) {
		String s = "hi good eveneing";
		int count = 1;
		for(int i =0; i <= s.length()-1; i++) {
			if(s.charAt(i)== ' ') {
				count = count + 1;
			}
		}
        System.out.println(count);
	}
}
3).WAP to halfreverse of the string  ...?
package strings;

public class HalfReverseTheString {

	public static void main(String[] args) {
		String s = "welcome";
		String s1 = "";
		for(int i = 0; i < s.length()/2; i++) {
			s1 = s1 +s.charAt(i);
		}
		for(int i = s.length()-1; i >= s.length()/2; i--) {
			s1 = s1 +s.charAt(i);
		}
        System.out.println(s1);
	}
}
4).........METHODS IN THE STRINGS...........
package strings;

public class MethodsInStrings {

	public static void main(String[] args) {
		/*1).charAt(int index)
		String s = "palle";
		System.out.println(s.charAt(4));*/
		/*2).concat(String str)
		String s = "palle";
		System.out.println(s.concat("tech"));
		System.out.println(s.concat(" tech"));*/
		/*3).contains(String str)
		String s ="palle";
		System.out.println(s.contains(s));
		System.out.println(s.contains(""));
		System.out.println(s.contains("Palle"));
		System.out.println(s.contains("palle"));
		System.out.println(s.contains("tech"));*/
		/*4).equals(Object anObject)
        String s = "palle";
        String s1 = "tech";
        System.out.println(s.equals(s1));
        System.out.println(s.equals("palle"));
        System.out.println(s.equals("tech"));
        System.out.println(s.equals("Palle"));*/
		/*5).equalsIgnoreCase(String anotherString)
		String s = "palle";
		String s1 = "PALLE";
		System.out.println(s.equalsIgnoreCase(s1));
		String s2 = "paLLE";
		System.out.println(s.equalsIgnoreCase(s2));*/
		/*6).indexOf(int char)
		String s = "palle";
		System.out.println(s.indexOf('o'));
		System.out.println(s.indexOf('p'));
		System.out.println(s.indexOf('P'));
		System.out.println(s.indexOf('0'));
		System.out.println(s.indexOf('%'));
		System.out.println(s.indexOf('l'));
		System.out.println(s.indexOf('l'));*/
		/*7).indexOf(String str)
		String s = "palle IT technology";
		System.out.println(s.indexOf(""));
		System.out.println(s.indexOf("IT"));
		System.out.println(s.indexOf("te"));
		System.out.println(s.indexOf("palle"));
		System.out.println(s.indexOf("it"));
		System.out.println(s.indexOf("logy"));*/
		/*8).lastIndexOf(int char)
		String s = "palle";
		String s1 = "technology";
		System.out.println(s.lastIndexOf('t'));
		System.out.println(s1.lastIndexOf('t'));
		System.out.println(s.lastIndexOf('l'));
		System.out.println(s1.lastIndexOf('y'));
		System.out.println(s1.lastIndexOf('Y'));
		System.out.println(s.lastIndexOf('A'));
		System.out.println(s.lastIndexOf('e'));*/
		/*9).lastIndexOf(String str)
		String s = "palle";
		String s1 = "technology";
        System.out.println(s.lastIndexOf(s));
        System.out.println(s.lastIndexOf(s1));
        System.out.println(s.lastIndexOf("logy"));
        System.out.println(s.lastIndexOf("palle"));
        System.out.println(s.lastIndexOf("tech"));
        System.out.println(s1.lastIndexOf("logy"));
        System.out.println(s1.lastIndexOf("gy"));
        System.out.println(s.lastIndexOf("le"));
        System.out.println(s.lastIndexOf("ll"));
        System.out.println(s.lastIndexOf("l"));*/
		/* 10).length()
		 String s = "palle";
		 System.out.println(s.length());
		 System.out.println(s.length());*/
		/*11).replace(char oldchar, char newchar)
		String s = "palle";
		String s1 = "tech";
		System.out.println(s.replace('a', '$'));
		System.out.println(s.replace('l', '&'));
		System.out.println(s1.replace('h', '+'));
		System.out.println(s.replace('e', 'k'));*/
		/*12).replace(String str)
		String s = "sahana";
		System.out.println(s.replace("sa", "ka"));
		System.out.println(s.replace("ha", "$&"));*/
		/*13).subString(int begining index)
		String s = "palle it tech";
		System.out.println(s.substring(0));
		System.out.println(s.substring(4));
		System.out.println(s.substring(10));
		System.out.println(s.substring(-1));*/
		/*14).sustrign(int begining index, int endindex)
		String s = "palle";
		String s1 = "sahanamm";
		System.out.println(s.substring(0, 2));
		System.out.println(s.substring(3) );
		System.out.println(s1.substring(2, 5));*/
		/*15).toLowerCase()
		String s = "paLle";
		String s1 = "TECHnolYYY";
		System.out.println(s.toLowerCase());
		System.out.println(s1.toLowerCase());*/
		//16).toUpperCase()
		String s = "palle";
		String s1 = "palLE TECHNOLOGY .cOm";
		System.out.println(s.toUpperCase());
		System.out.println(s1.toUpperCase());
	}
}


    *
  * * *
* * * * *
05/08/2024
1).reverse the words of the string ...?
ex: sahana hassan becomes hassan sahana
public class Main{
public static void main(String[] args){
String s1 ="sahana hassan";
String s2 = "";
String s3 = "";
for(int i=0;i<=s.length()-1;i++){
if(s1.charAt(i)==' '){
s2 = s2 + s3 + " ";
s3 = "";
}
else{
s3=s1.charAt(i)+s3;
}
}
s2 = s2 + s3;
System.out.println(s2);
}
}

22/08/2024
1).lass MyClass{
int i = 10;
}
public class StringDemo2 {
public static void main(String[] args) {
MyClass m = new MyClass();
MyClass n = new MyClass();

if(m.equals(n)){
System.out.println("same");
}else{
System.out.println("not same");
}
}
}
for this question what is the output
In your code, MyClass instances m and n are being compared using the equals method. 
However, since the equals method is being used without overriding it, 
it will use the default implementation from the Object class.
Here's how it works:
Default equals Method: By default, the equals method in the Object class compares 
the memory addresses of the two objects. This means it checks if m and n refer to
the same object instance, not if their contents are the same.

m.equals(n): Since m and n are two different instances of MyClass, the default 
equals method will return false, because they are not the same instance. Therefore,
the output will be "not same".

If you want to compare the contents of m and n based on specific fields, 
you need to override the equals method in MyClass. Here's an example:

java
Copy code
public class MyClass {
    private int value;

    public MyClass(int value) {
        this.value = value;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        MyClass myClass = (MyClass) obj;
        return value == myClass.value;
    }

    @Override
    public int hashCode() {
        return Integer.hashCode(value);
    }
}
With this implementation, if you create instances of MyClass with the same value,
the equals method will return true if the values are the same, and "same" will be printed. 
Otherwise, "not same" will be printed.

