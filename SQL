16/07/2024
1).using constraints we can limit the data which is coming into table column...
a).default key constraint
b).null key constraint
c).check key constraint
d).primary key constraint
e).unique constraint
f).foreign key constraint
and here one example....
use mysql
create table stud(sid int, name varchar(40),city_name varchar(40)default 'banglore')
create table emp(eid int not null,name varchar(40),email varchar(40))
create table empl(eid int,name varchar(40),age int check(age between 18 and 60))
create table cust(cid int primary key,cust_name varchar(40),cust_mail varchar(40))
create table custm(c_id int unique,name varchar(40),product varchar(40))
create table s(sid int primary key)
create table art(art_id int, sid int,foreign key(sid)references s(sid))
2).to overcome from the insertion anomoly we add foreign key constraint....?
create database mysqlbatch
use mysql
create table state(sid int primary key,statename varchar(40))
insert into state values(1,'karnataka'),(2,'tamilnadu'),(3,'andrapradesh'),
(4,'kerala'),(5,'uttarpradesh')
select * from state
create table student(sid int,name varchar(40),stateid int,foreign key(stateid) references state(sid))
insert into student values(101,'sahana',3),(102,'saanu',4),(103,'sanvi',1),(104,'sahani',5),(105,'baby',2)
select * from student
insert into student values(106,'harini',1),(107,'prarthana',5)
select * from student 
3).to overcome from the insertion anomoly we add foreign key constraint....?
create database mysql1
use mysql
create table blood_group(bg_id int primary key,blood_group varchar(40))
insert into blood_group values(1,'o+ve'),(2,'o-ve'),(3,'b+ve')
select * from blood_group
create table state1(state_id int primary key,satete_name varchar(40))
insert into state1 values(1,'karnataka'),(2,'andrapradesh'),(3,'kerala')
select * from state1
create table new_employee(eid int,ename varchar(40),age int,bg_id int,state_id int,
foreign key(bg_id)references blood_group(bg_id),foreign key(state_id)references state1(state_id))
insert into new_employee values(11,'sahana',21,1,1),(12,'sanvi',22,2,3),(13,'sahani',22,3,1)
select * from new_employee

17/07/2024
1).display all employee details...?
use mysql
create table employee(eid int,fname varchar(40),lname varchar(40),age int,salary int,
dept varchar(40),doj date)
insert into employee values(1,'rajeev','sukla',23,12000,'.net','2011-10-23'),
(2,'sowmya','kumari',23,19000,'db','2010-11-13'),
(3,'kishor','kumar',27,36000,'android','2011-10-16'),
(4,'abhimanyu','biswal',22,NULL,'android','2010-02-20'),
(5,'soni','kumar',24,21800,'.net','2009-06-21'),
(6,'anu','_singh',22,12000,'db','2010-10-23'),
(7,'_dinesh','moh%anty',22,15000,'.net','2009-08-26'),
(8,'nishala','_kumari',22,18000,'db','2008-07-19'),
(1,'rajeev','sukla',23,12000,'.net','2011-10-23')
select * from employee

11/08/2024
INTERVIEW PREPERATION
use mysql
create table Employeinfo(empID int,empFname varchar(40),empLname varchar(40),department varchar(40),salary int)

insert into Employeinfo(empID,empFname,empLname,department,salary)values(1,'karan','mehta','HR',300000),
(2,'rohit','sharma','Admin',75000),
(3,'anush','rajput','Account',60000),
(4,'priyanshi','sharma','HR',500000),
(5,'sanket','gupta','Developer',100000),
(6,'shruti','kapoor','Admin',80000),
(2,'rohit','sharma','Admin',75000)

1).write a query to find the third highest salary from the employeeInfo Table
select salary from Employeinfo order by salary desc limit 2,1
or
select * from Employeinfo order by salary desc limit 2,1

2).write a query to get 5 th lowest salary from the employeInfo table
select salary from Employeinfo order by salary asc limit 4,1

3)write a query to find the Nth highest salary from the table without using top/limit kayword
if we want to fetch the 3rd highest salary N=3
select salary from Employeinfo e1 where 2=(select count(distinct salary) 
from Employeinfo e2 where e2.salary>e1.salary)
(here N can be 1,2,3,.....so on and the query like select salary from Employeinfo e1 where 2=(select count(distinct salary) 
from Employeinfo e2 where e2.salary>e1.salary))

4).write the sql query to find the duplicate rows in a table
select empID,count(empID) from Employeinfo group by empID having count(empID) > 1

5).write a query to calculate even and odd records from the table
to find even records
select * from Employeinfo where MOD(empID,2)=0
to find odd records
select * from Employeinfo where MOD(empID,2)=1

6).write a query to display the first and the last record from the Employeinfo table
for to get first record
select * from Employeinfo where empID = (select min(empID) from Employeinfo)
for to get the last record
select * from Employeinfo where empID = (select max(empID) from Employeinfo)

7).how do you copy the all rows of a table using SQL
create table EmpSalary AS select empID,salary from employeInfo
select * from EmpSalary

to copy all information into another table 
create table EmpDetails AS select * from Employeinfo

8).to copy only SCHEMA not the data of the table using this query
(NOTE: here we are copying the SCHEMA of the table not the data from the table)
create table EmpCopy AS select * from Employeinfo where 3=4
select * from EmpCopy

9).write a query to retrieve the list of employees working in the same department
select distinct e.empID,e.empFname,e.department from Employeinfo e,Employeinfo e1 
where e.department=e1.department AND e.empID != e1.empID

10).write a query to retrieve last three records from the Employeinfo table
select * from (select * from Employeinfo order by empID desc limit 3) temp order by empID asc
or 
select * from Employeinfo order by empID limit 4,3

11).write a query to fetch details of employees whose empLname ends with alphabet 'a' 
and contain 5 alphabets from start to end
select * from Employeinfo where empLname like '----a'
select * from Employeinfo where empLname like '-----a'
select * from Employeinfo where empLname like 'r%'

ANOTHER EXAMPLE
use mysql
CREATE TABLE Empinfor(id INT(10),name VARCHAR(40),email VARCHAR(40),
department VARCHAR(40),salary INT,DOB DATE,gender CHAR(1))
insert into Empinfor(id,name,email,department,salary,DOB,gender)values
(1,'karan mehta','karan@gmail.com','HR',300000,'1998-05-10','M'),
(2,'rohit sharma','rohit@gmail.com','Admin',75000,'1997-01-25','M'),
(3,'ankush rajput','ankush@gmail.com','Accounts',60000,'1998-02-09','M'),
(4,'priyanshi sharma','priyanshi@gmail.com','HR',500000,'1998-06-15','F'),
(5,'sanket gupta','sanket@gmail.com','Developer',100000,'1997-05-07','M'),
(6,'shruthi sharma','shruthi@gmail.com','Admin',80000,'1995-11-26','F'),
(7,'rohit sharma','rohit@gmail.com','Admin',75000,'1997-01-25','M'),
(8,'sanket gupta','sanket@gmail.com','Developer',100000,'1997-05-07','M'),
(9,'geet gour','geet@gmail.com','Tester',17000,'1998-07-03','F')
select * from Empinfor

12).write a query to delete the duplicate record from the employeInfo tabel 
delete from Employeinfo e1,Employeinfo e2 where e1.email=e2.email AND e1.id != e2.id
set sql_safe_updates=0
DELETE FROM Empinfor WHERE id IN (SELECT id FROM (SELECT e1.id FROM Empinfor e1
JOIN Empinfor e2 ON e1.email = e2.email WHERE e1.id > e2.id) AS temp)
select * from Empinfor

13).write a query t retreive the first four characters of employe name from the Empinfor table
select SUBSTRING(name,1,4) from Empinfor

14).write a query to find number of employees whose DOB is between 01/06/1995 to 30/06/1998
and are grouped according to gender
select count(*),gender from Empinfor where DOB between '1995=01-01' AND '1998-06-30' 
group by gender

note:if we enter the date in any format like mm/dd/yyyy or mm/yyyy/dd or yyyy/dd/mm
 we need to get output when we use the STR_TO_DATE function
select count(*),gender from Empinfor where DOB between STR_TO_DATE('01-01-1995','%d/%m/%y')
AND
STR_TO_DATE('30-06-1998','%d/%m/%y') group by gender

for ex: STR_TO_DATE('July 01 1995', '%M %d %Y')
 SELECT STR_TO_DATE('JANUARY 01 1995', '%M %d %Y')
SELECT STR_TO_DATE('01 august 1995', '%d %M %Y');
note:here must and should the month and year are in the capital letters

15).write a query to fetch all the records from the Empinfor table ordered by department in ascending 
order and salary in the descending order
select * from Empinfor order by department asc,salary desc
(here first Storage Engine order the departments the aiisgn their particular salaries
 because in statement we first give like this order by department asc thats why)

16).write a query to fetch details of all employees excluding the employees 
who are belonged to the HR and Admin department
select *  from Empinfor where department not in ('HR','Admin')

17).write a query to fetch 50% records from the Empinfor table 
select * from Empinfor where id <= (select count(id)/2 from Empinfor)
#.when some records are deleted like 4 is missing from the autoincrementd  id's then what we do is
set @count = (select count(id)/2 from Empinfor
PREPARE STMT from select * from Empinfor limit 5
EXECUTE STMT using @count

**********or***********
-- Set the count variable
SET @count = (SELECT COUNT(id) / 2 FROM Empinfor);
-- Prepare the statement
PREPARE STMT FROM 'SELECT * FROM Empinfor LIMIT 5';
-- Execute the prepared statement
EXECUTE STMT;
-- Deallocate the prepared statement
DEALLOCATE PREPARE STMT;
select * from Empinfor limit 5

Hereâ€™s how you can use a variable in a query without needing PREPARE:
-- Set the variable
SET @count = (SELECT COUNT(id) / 2 FROM Empinfor);
-- Use the variable in a query
SELECT * FROM Empinfor LIMIT @count

DELIMITER //
CREATE PROCEDURE GetLimitedRecords()
BEGIN
    DECLARE limitCount INT;
    SET limitCount = (SELECT COUNT(id) / 2 FROM Empinfor);
    
    SET @sql = CONCAT('SELECT * FROM Empinfor LIMIT ', limitCount);
    PREPARE STMT FROM @sql;
    EXECUTE STMT;
    DEALLOCATE PREPARE STMT;
END //
DELIMITER ;

********or**********
-- Set the variable
SET @count = (SELECT COUNT(id) / 2 FROM Empinfor);
-- Prepare the dynamic SQL
SET @sql = CONCAT('SELECT * FROM Empinfor LIMIT ', @count);
-- Prepare and execute the statement
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
OTHER WAYS LIKE
a).using floor to get 4.5->4(values)
select floor(count(id)/2)from Empinfor
b).using ceil to get 4.5->5(values)
select ceil(count(id)/2)from Empinfor

17).write a query to display the total salary of each employee after adding 10%  increment in the salary
select id,name,salary + (salary/10) AS TotalSalary from Empinfor

18).write a query to retreive two minimum and maximum salaries..?
a).for minimum salary
select distinct salary from Empinfor e1 where 2 >= (select count(distinct salary) 
from Empinfor e2 where e1.salary >= e2.salary) order by e1.salary asc
b).for maximum salary
select distinct salary from Empinfor e1 where 2 >= (select count(distinct salary) 
from Empinfor e2 where e1.salary <= e2.salary) order by e1.salary desc

19).write a query to fetch the Empinfor name and replace the space with '_'..?
here we can easily get it by using the "REPLACE" function...
select REPLACE(name,' ','_') from  Empinfor

20).write a query to fetch the employee gender and replace the 'M'  with 'male'..?
select *,REPLACE(gender,'M','male') from Empinfor

21).write a query to fetch the employee gender and replace the 'F'  with 'female_employee'..?
select *,REPLACE(gender,'F','female_employee') from Empinfor

22).write a query to fetch the employee gender and replace the 'M'  with 'male' and 'F' with 'female'..?
select *,REPLACE(REPLACE(gender,'M','male'),'F','female') from Empinfor
SELECT *, REPLACE(REPLACE(gender, 'M', 'male'), 'F', 'female') AS gender FROM Empinfor;


31/08/2024
Normalization is a process in database design used to reduce redundancy and improve data 
integrity by organizing data into related tables. This helps in avoiding anomalies and 
inconsistencies during database operations like insertion, updating, and deletion.

Types of Anomalies Addressed by Normalization
Insertion Anomaly:

Occurs when you cannot insert data into the database without including additional, unwanted data.
Example: In a table where student information and course enrollment are combined, you cannot 
add a new student without also adding a course enrollment.
Update Anomaly:

Occurs when data needs to be updated in multiple places to ensure consistency.
Example: If a studentâ€™s address is stored in multiple rows, updating the address requires 
changing it in every row where it appears.
Deletion Anomaly:

Occurs when the deletion of data causes unintended loss of additional information.
Example: Deleting a course from a table that combines course details and student enrollment 
could also accidentally remove information about students enrolled in that course.
How Normalization Helps
Reduces Redundancy:

Data is stored in such a way that duplication is minimized. This means each piece of information 
is stored in only one place.
Improves Data Integrity:

Ensures that the data is consistent and accurate. By dividing data into related tables, you ensure 
that changes are made in one place, which automatically updates related data.
Eliminates Anomalies:

By organizing data into tables and establishing relationships, normalization addresses the anomalies 
mentioned above, ensuring that the database remains consistent and reliable.
Normal Forms
Normalization is typically carried out in stages known as normal forms:

First Normal Form (1NF): Ensures that each column contains atomic values and each record is unique.
Second Normal Form (2NF): Ensures that all non-key attributes are fully functionally dependent on the primary key.
Third Normal Form (3NF): Ensures that all non-key attributes are not only fully functionally dependent on the primary 
key but also independent of each other.
Boyce-Codd Normal Form (BCNF): A stronger version of 3NF that deals with certain types of anomalies not handled by 3NF.
Summary
Normalization helps avoid anomalies by structuring data in a way that ensures consistency, reduces redundancy, 
and makes it easier to maintain and manage. This process is essential for creating a robust and efficient database system.


Scenario: Combined Table for Student Information and Course Enrollment
Imagine you have a table that combines student information and their course enrollments:

Table: StudentCourse
StudentID	StudentName	CourseID	CourseName
1	Alice	101	Math
1	Alice	102	Science
2	Bob	103	History
Issue: Insertion Anomaly
Problem: You want to add a new student to the database, but the table design forces you to also include course information.

Inserting New Student:

Suppose you want to add a new student named Carol who hasnâ€™t enrolled in any courses yet.
sql
Copy code
INSERT INTO StudentCourse (StudentID, StudentName, CourseID, CourseName)
VALUES (3, 'Carol', NULL, NULL);
Problem: The above insert statement is problematic because it leaves CourseID and CourseName as NULL, 
which might not be allowed or meaningful. This also could lead to inconsistencies or incomplete data.

Current Table Structure:

The table design requires CourseID and CourseName for each entry, meaning you can't just insert a student
without specifying at least one course.
Proper Database Design to Avoid Insertion Anomaly
To avoid this problem, you should separate student information and course enrollment into different tables.
Hereâ€™s how you can redesign the schema:

Table: Student
StudentID	StudentName
1	Alice
2	Bob
3	Carol
Table: Enrollment
StudentID	CourseID	CourseName
1	101	Math
1	102	Science
2	103	History
How It Solves the Insertion Anomaly
Adding New Student:

You can add a new student to the Student table without any requirement to specify course information.
sql
Copy code
INSERT INTO Student (StudentID, StudentName)
VALUES (4, 'Dave');
Adding Course Enrollment Later:

You can insert course enrollments separately when needed, without forcing the student record to be linked
with a course immediately.
sql
Copy code
INSERT INTO Enrollment (StudentID, CourseID, CourseName)
VALUES (4, 104, 'Geography');
Summary
By separating student information and course enrollments into different tables, you avoid the insertion anomaly. 
Now, you can add students or course enrollments independently, ensuring that your database design supports data
integrity and flexibility.







