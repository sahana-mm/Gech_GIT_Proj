"CONSTRUCTORS"
Constructors are the special type of fenctions/methods
here we need to know three scenarios....
1).same number of parameters with different datatype....?
package constructors;

public class ConstructorEx {

	public static void main(String[] args) {
		

	}

}
class Test{
	public Test(int x) {
		
	}
	public Test(float x) {
		
	}
}
2).different number of paramenters of same datatype....?
package constructors;

public class ConstructorEx2 {

	public static void main(String[] args) {
		

	}

}
class Test1{
	public Test1(int x) {
		
	}
	public Test1(int x,float y) {
		
	}
}
3).same number of parameters in different order....?
package constructors;

public class ConstructorEx3 {

	public static void main(String[] args) {
		

	}

}
class Test2{
	public Test2(int x,float f,String s) {
		
	}
	public Test2(int x,String s,float f) {
		
	}
    public Test2(String s,float f,int x) {
		
	}
}
4).Constructors properties...?
package constructors;

public class ConstructorProperties {

	public static void main(String[] args) {
		Test5 t = new Test5(2,"saan"); 
		
	}

}
class Test5{
	public Test5(int x,String s) {
		System.out.printf("it is " + x +  s);
	}
}
5).one example..?
package constructors;

public class MainEx {

	public static void main(String[] args) {
		Hospital h1 = new Hospital("sahana",22);
		Hospital h2 = new Hospital(21,"saan");
		Hospital h3 = new Hospital(20,"sahani");
	}

}
class Hospital{
	public Hospital(String name1,int age1) {
		System.out.println(name1 + age1);
	}
	public Hospital(int age2,String name2) {
		System.out.println(name2 + age2);
	}
	public Hospital(byte age4,String name4) {
		System.out.println(age4);
	}
}

29/07/2024
1).
here we are not specifying this keyword and local variables and instance variables name are same.
here what happens is the jvm will always prefer the local variables
thats why the jvm will fetch the local variables values and  
assign those values which are present in the stack itself 
thats why output is null for string variable and 0  for integer variable.
package constructors;

public class Costruct {

	public static void main(String[] args) {
		Student s1 = new Student("sahana",21);
		Student s2 = new Student("sahani",20);
		Student s3 = new Student("saan",22);  
		s1.display();
		s2.display();
		s3.display();
	}
}
class Student{
	public String name;
	public int age;
	public Student(String name,int age) {
		name = name;
		age = age;
	}
	public void display() {
		System.out.println(name);
		System.out.println(age);		
	}	
}
here we are not specifying this keyword and local variables and instance variables name are same.
here what happens is the jvm will always prefer the local variables
thats why the jvm will fetch the local variables values and  
assign those values which are present in the stack itself 
thats why output is null for string variable and 0  for integer variable.
2).here we are assigning different variable names to the different variables like instance and local variables.
and here we are fetching the values and print the values without any issues
package constructors;

public class Student1 {

	public static void main(String[] args) {
		Student3 s1 = new Student3("sahana",21);
		Student3 s2 = new Student3("sahani",20);
		Student3 s3 = new Student3("saan",22);  
		System.out.println("1st student detais");
		s1.display();
		System.out.println("2nd student detais");
		s2.display();
		System.out.println("3rd student detais");
		s3.display();
	}
}
class Student3{
	public String name;
	public int age;
	public Student3(String n,int a) {
		name = n;
		age = a;
	}
	public void display() {
		System.out.println(name);
		System.out.println(age);		
	}	
}
here we are assigning different variable names to the different variables like instance and local variables.

3).using keyword we are declaring that this keyword is responsible for creating the objects in the
heap location and normal variables are local variables...
package constructors;

public class MainExample {

	public static void main(String[] args) {
		Stud s1 = new Stud("sahana",21);
		Stud s2 = new Stud("sahani",20);
		Stud s3 = new Stud("saan",22);  
		System.out.println("1st student detais");
		s1.display();
		System.out.println("2nd student detais");
		s2.display();
		System.out.println("3rd student detais");
		s3.display();
	}
}
class Stud{
	public String name;
	public int age;
	public Stud(String name,int age) {
		this.name = name;
		this.age = age;
	}
	public void display() {
		System.out.println(name);
		System.out.println(age);		
	}
}
here jvm will come to know that the this.name and this.age are instance variables and the are created in the heap location. 

30/07/2024
1).package constructors;

public class CreateDoctorPatientNurse {

	public static void main(String[] args) {
	   Doctor d = new Doctor("sachin",10);  
	   Patient p = new Patient("kumar","Viral fever");
	   Nurse n = new Nurse("kavya","OT");
	   System.out.println("DOCTOR DETAILS");
	   d.display();
	   System.out.println("PATIENT DETAILS");
	   p.display();
	   System.out.println("NURSE DETAILS");
	   n.display();

	}

}
class Doctor{
	public String dname;
	public int dexp;
	public Doctor(String dname, int dexp) {
		this.dname=dname;
		this.dexp=dexp;
	}
	public void display() {
		System.out.println(dname);
		System.out.println(dexp);
	}
}

class Patient{
	public String pname;
	public String pdis;
	public Patient(String pname,String pdis) {
		this.pname=pname;
		this.pdis=pdis;
	}
	public void display() {
		System.out.println(pname);
		System.out.println(pdis);
	}
}

class Nurse{
	public String Nname;
	public String Nspec;
	public Nurse(String Nname,String Nspec) {
		this.Nname=Nname;
		this.Nspec=Nspec;
	}
	public void display() {
		System.out.println(Nname);
		System.out.println(Nspec);
	}
}

01/08/2024
1).oop concepts
a).object
it is a real world entity.
b).class
it is a virtual entity.
c).encapsulation
it is the collection of logically realated data and functions in a class.
it gives security for data.
d).abstraction
it provides security for code.
e).inheritance
f).polymorphism

2).one example for the encapsulation...?
package encapsulation;

public class GetterAndSetterMethods {

	public static void main(String[] args) {
		Bank b = new Bank();
		int money1 = b.getMoney();
		System.out.println(money1);
        b.setMoney(1000);
        int money2 = b.getMoney();
		System.out.println(money2);
	}

}
class Bank{
	private int money = 100000;
	public int getMoney() {
		return money;
	}
	public void setMoney(int money) {
		this.money = money;
	}
}












