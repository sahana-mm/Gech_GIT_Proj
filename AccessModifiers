1).private access modifier(class private)
package accessmodifier;

public class PrivateAccessSpecifier {

	public static void main(String[] args) {
		//A1 obj = new A1();// here we can call constructor only when constructor is default
		/*A1 obj = new A1();
         obj.dispaly(); this is possible when the method is default*/
	}

}
class A1{
	private int data = 40;
	   //private A1() {
	    // }
		private void dispaly() {
			System.out.println("hello from A");
			System.out.println(data);
		}
		class B1 extends A1{
			void access() {
				
		}
	}
}
2).default(package private)
package accessmodifier;

public class DefaultAcccessModifier {

	public static void main(String[] args) {
		A2 obj = new A2();
		System.out.println(obj.data);
        obj.display();
        
	}

}
class A2{
	int data = 40;
	A2(){		
	}
	void display() {
		System.out.println("hello from A2");
	}
	class B2 extends A2{
		void access() {
			System.out.println(data);
			display();
		}
	}
}
3).protected access modifier
package accessmodifier;

public class ProtectedAccessModifier {

	public static void main(String[] args) {
		A3 obj = new A3();
		System.out.println(obj.data);
        obj.display();
	}

}
class A3{
	protected int data = 40;
	protected A3() {
	}
	protected void display() {
		System.out.println("hello from A3");
	}
	class B3 extends A3{
		void access() {
			System.out.println(data);
			display();
		}
	}
}
4).public access modifier
package accessmodifier;

public class PublicAccessModifier {

	public static void main(String[] args) {
		A4 obj = new A4();
		System.out.println(obj.data);
		obj.display();

	}

}
class A4{
	public int data = 40;
	public A4() {
	}
		public void display() {
			System.out.println("hello from A4");
		}
	
	class B4 extends A4{
		void access() {
			System.out.println(data);
			display();
		}
	}
}

30/08/2024
1) Can we call super() in the main function?

"In Java, the super() call is specifically designed to be used within constructors 
to invoke the constructor of the parent class. Since the main function is a static 
method and is not associated with any class instance, it cannot directly call super().
However, if you want to ensure that the parent class constructor is invoked, you would create 
an object of the subclass within the main method, and the super() call will automatically be 
invoked as part of the subclass's constructor."

2) Can we use static members inside the constructor?

"Yes, we can use static members inside a constructor. Static members belong to
the class itself rather than any specific instance, so they are accessible anywhere 
within the class, including the constructor. However, it's important to note that while 
static members can be accessed, the primary purpose of a constructor is to initialize 
instance variables, not static members, as static members should already be initialized when the class is loaded."

3) Can I make a constructor private? If yes, then how can I access it?

"Yes, you can make a constructor private in Java. This is often done in design 
patterns like Singleton, where you want to restrict the instantiation of a class 
to a single instance. To access or instantiate the class with a private constructor, 
you typically provide a public static method within the class that returns the single instance. 
This pattern ensures controlled access to the class's instance."

4) Can I inherit a parent class if the parent class is private?

"No, you cannot inherit from a parent class if it is private. In Java, a private class
cannot be accessed outside the class in which it is declared. Inheritance requires that 
the subclass be able to access the parent class, so if the parent class is private, it 
effectively blocks inheritance. Typically, classes are made public or package-private to 
allow for inheritance and use within the same package."

5) Can I inherit a parent class constructor into a child class?

"In Java, constructors are not inherited by the subclass. However, a subclass can
invoke a parent class constructor using super() within its own constructor. This 
allows the child class to reuse the parent class's constructor logic, but the constructor
itself is not directly inherited. It's a powerful feature that ensures proper initialization
of both the parent and child classes."

5).interfaces in java programming language
package interfaace;

// Interface definition
public interface Movable {
    void move();
}

// Car class implementing Movable
class Car implements Movable {
    @Override
    public void move() {
        System.out.println("The car drives on the road.");
    }
}

// Bicycle class implementing Movable
class Bicycle implements Movable {
    @Override
    public void move() {
        System.out.println("The bicycle pedals on the path.");
    }
}

// Main class to run the program
public class Main {
    public static void main(String[] args) {
        Movable myCar = new Car();
        Movable myBicycle = new Bicycle();

        myCar.move();        // Output: The car drives on the road.
        myBicycle.move();    // Output: The bicycle pedals on the path.
    }
}
orr**************************
package interfaace;

public class Main {
    
    // Interface definition
    public interface Movable {
        void move();
    }

    // Car class implementing Movable
    static class Car implements Movable {
        @Override
        public void move() {
            System.out.println("The car drives on the road.");
        }
    }

    // Bicycle class implementing Movable
    static class Bicycle implements Movable {
        @Override
        public void move() {
            System.out.println("The bicycle pedals on the path.");
        }
    }

    // Main method to run the program
    public static void main(String[] args) {
        Movable myCar = new Car();
        Movable myBicycle = new Bicycle();

        myCar.move();        // Output: The car drives on the road.
        myBicycle.move();    // Output: The bicycle pedals on the path.
    }
}
18/09/204
1).package finallyblock;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

public class FileWriterBufferedWriter {

	public static void main(String[] args) {
		File f = new File("C:\\Users\\sahan\\OneDrive\\Desktop\\june3\\sunu.txt");
		FileReader fr = null;
		BufferedReader br = null;
		try {
			fr = new FileReader(f);
			br = new BufferedReader(fr);
			String str;
			try {
				str = br.readLine();
				while(str != null) {
					System.out.println(str);
					str=br.readLine();
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally {
			try {
				br.close();
				fr.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}			
		}
	}
}
